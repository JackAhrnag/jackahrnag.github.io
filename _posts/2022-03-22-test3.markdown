---
layout: post
title:  "과제_분할 정복 알고리즘(교제편)"
date:   2022-03-22 16:30:00 +0900
categories: jekyll update
---
##201901669_김현승

# 목차
<ol>
<li>기본적인 개념</li>
<li>합병 정렬</li>
<li>퀵 정렬</li>
<li>이해 안 되는 것</li>
</ol>
<br>

---

<br>

# 기본적인 개념

<br>
분할 정복 알고리즘이란 말 그대로 주어진 문제를 **분할**하여 해결하는 방식의 알고리즘이다.
<br><br>
만약 입력크기가 α인 알고리즘이 있을 때, 이것을 분할 정복 알고리즘으로 풀어본다면 처음 분할할 때는 입력 크기가 α/2, 그 다음에는 α/2² 식으로 계속해서 줄어들며, n번 분할 후에는 입력크기가 α/2ⁿ인 것을 확인할 수 있다.  
α/2ⁿ = 1 일때 더이상 분할할 수 없기 때문에 따라서 n=log₂α임을 알 수 있다.
<br><br>
즉 분할 정복 알고리즘을 적용할 수 있는 알고리즘은 이를 통해 성능이 비약적으로나마 오를 수 있다고 할 수 있다.
<br>

---

<br>
# 합병 정렬
<br>
합병 정렬은 입력이 2개의 부분문제로 분할하는 알고리즘이다. 즉 α의 입력크기를 가진 문제를 2개의 부분문제로 분할하여 α/2로 만들고, 각각의 부분문제를 순환적으로 합병 정렬한 후, 2개의 정렬된 부분을 합병하여 정렬하는 것이다.
<br><br>
코드를 통해 설명해보자.

```
#define SIZE 5
int tmp[SIZE];

void mergeSort(int arr[], int left, int right) {
 
    if(left==right) return;  
    int mid;
     
    mid = (left + right) / 2;
    mergeSort(arr, left, mid); 
    mergeSort(arr, mid + 1, right); 
     
}
```

우선 분할하는 코드가 위와 같이 있다고 해보자.  
그리고 이곳에 합병하는 코드를 더해보자.

```
void merge(int arr[], int left, int right) {
     
    int L, R, k, a;
    int mid = ( left + right ) / 2;
    L = left;
    R = mid + 1;
    k = left;
 
    while (L <= mid && R <= right)
        tmp[k++] = arr[L] <= arr[R] ? arr[L++] : arr[R++];
 
    if (L>mid) 
        for (a = R; a <= right; a++)
            tmp[k++] = arr[a];
    else
        for (a = L; a <= mid; a++)
            tmp[k++] = arr[a];
     
    for (a = left; a <= right; a++) 
        arr[a] = tmp[a];
     
}
```

우선 이 함수는 배열 arr과 정수 left, right를 받는다.  
L은 왼쪽을 뜻하므로 left를, R은 오른쪽을 뜻하므로 left가 끝나는 수의 다음 값인 mid + 1을 대입한다. 물론 mid는 중간으로 left와 right를 더한 값의 2를 나눈수이다. 

```
while (L <= mid && R <= right)
        tmp[k++] = arr[L] <= arr[R] ? arr[L++] : arr[R++];
```

while에서 arr배열 안의 오른쪽과 왼쪽의 수를 비교하여 더 작은 수를 tmp에 넣는다.  
만약 왼쪽 배열이 `1 5 7 8 9`, 오른쪽 배열이 `3 4 6 10`일 때, 3보다 1이 더 작으니 tmp배열에 우선 1이 들어가고 왼쪽 배열은 다음 수를 지정한다.  
그렇개 되면 5와 3을 비교하게 되고, 5보다 3이 더 작으므로 tmp배열에 3이 들어가게 된다.  
그렇게 마지막으로 10이 남게 되는대, 여기서 다음 코딩으로 마지막 수가 tmp배열에 들어가게 된다.  

```
    if (L>mid) 
        for (a = R; a <= right; a++)
            tmp[k++] = arr[a];
    else
        for (a = L; a <= mid; a++)
            tmp[k++] = arr[a];
```

즉 병합 배열의 최종적인 코드는 아래와 같다고 할 수 있다.

```
#include <stdio.h>
#define SIZE 5
int tmp[SIZE];
                     
void merge(int arr[], int left, int right) {
     
    int L, R, k, a;
    int mid = (left + right) / 2;
    L = left;
    R = mid + 1;
    k = left;
 
    while (L <= mid && R <= right)
        tmp[k++] = arr[L] <= arr[R] ? arr[L++] : arr[R++];
 
    if (L>mid) 
        for (a = R; a <= right; a++)
            tmp[k++] = arr[a];
    else
        for (a = L; a <= mid; a++)
            tmp[k++] = arr[a];
     
    for (a = left; a <= right; a++) 
        arr[a] = tmp[a];
     
}
 
 
void mergeSort(int arr[], int left, int right) {
     
    if (left == right) return;
    int mid;
    mid = (left + right) / 2;
    mergeSort(arr, left, mid); 
    mergeSort(arr, mid + 1, right); 
    merge(arr, left, right); 
     
}
```

합병 정렬의 시간복잡도는 입력크기가 α라 했을 때 O(αlog₂α)이다.

<br>

---

<br>

# 퀵 정렬

<br>
퀵 정렬 알고리즘은 문제를 2개의 부분문제로 분할할때, 각 부분문제의 크기를 일정하지 않은 형태로 나누는 분할 정복 알고리즘이다.
<br><br>
퀵 정렬을 알기 위해서는 pivot(이하 피봇)을 알아야 하는대, 간단하게 작은 수와 큰 수를 비교하기 위한 기준이라고 생각하면 된다.  
이번에도 코드와 함께 설명해보자.

```
void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}
 
void quickSort(int left, int right, int *arr) {
    int pivot = arr[left];
    int less = left;
    int more = right+1;
     
    if (left < right) {
        do {
            do
                less++;
            while (less <= right && arr[less] < pivot);
 
            do
                more--;
            while (more >= left && arr[more] > pivot);
 
            if (less < more)
                swap(&arr[less], &arr[more]);
 
        } while (less < more);
        swap(&arr[left], &arr[more]);
         
        quickSort(left, more - 1,arr);
        quickSort(more + 1, right, arr);
    }
 
}
```

여기서는 편하게 가장 왼쪽의 있는 수를 피봇으로 설정하였다.  
less는 왼쪽의 수를, more은 오른쪽의 수를 지정한다.

```
            do
                less++;
            while (less <= right && arr[less] < pivot);
 
            do
                more--;
            while (more >= left && arr[more] > pivot);
```

여기서 arr[less]의 수가 피봇보다 크다면 멈추고, arr[more]의 수가 피봇보다 작다면 멈춘다.  
그 후, less의 수가 more의 수보다 작다면 둘의 수를 바꾼다.
<br><br>
예를 들어보자, 만약 피봇이 5이고 arr[less]의 수가 8 arr[more]의 수가 3일 때, 만약 less가 2 more이 5라면 이 둘을 바꾸어 arr[2] = 3 이 되고 arr[5] = 8 이 되는 것이다.
<br><br>
입력크기가 α일 때, 퀵 정렬의 최악의 경우 시간복잡도는 O(α²)이나 최선의 경우 시간복잡도는 O(αlog₂α)이다.
<br>

---

<br>

# 이해 안 되는 것

<br>

교제에 나와있는 최근접 점의 쌍 찾기는 이해하기 힘들었다.  
이해는 어느정도 했으나 문제는 말로 풀어쓰지를 못하겠다는 것이 문제다. 이것도 다시 살펴봐야겠다.

<br><br>

힙 정렬이라는 것도 찾았는대 읽으면 읽을 수록 미지로 빠져드는 것이 느껴진다.  
저녁먹으면서 천천히 읽어보도록 해야겠다.

<br><br>

또 다시 테마를 적용해보려 했지만 실패했다.  
업로드 하는 시간이 많이 걸리는 것인지 아니면 블로그 자체가 망가지는 것인지 테마를 업로드 해보려 `git push` 하면 블로그가 멈쳐버린다. 로컬로 테스트 해보면 잘 작동하는대 뭐가 문제인지 오늘 조금 더 만져봐야겠다.